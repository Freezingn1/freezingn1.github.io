(function() {
    const TARGET_TAB = "CUB"; // –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const DELAY = 2000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    const MAX_ATTEMPTS = 15;
    let attempts = 0;

    console.log(`üîß –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä v4 –∑–∞–ø—É—â–µ–Ω (–∏—â–µ–º "${TARGET_TAB}")`);

    function findAndActivate() {
        attempts++;
        if (attempts > MAX_ATTEMPTS) {
            console.warn("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫");
            return;
        }

        // 1. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        const targetVariants = [
            TARGET_TAB,
            TARGET_TAB.toUpperCase(),
            TARGET_TAB.toLowerCase()
        ];

        // 2. –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤–∫–ª–∞–¥–æ–∫
        const tabSelectors = [
            '[class*="tab"]',
            '[role="tab"]',
            '[class*="source"]',
            '[class*="selector"]',
            '[data-testid*="tab"]',
            '[aria-label*="tab"]',
            'button, div, a, li' // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
        ].join(',');

        // 3. –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
        const tabs = document.querySelectorAll(tabSelectors);
        
        tabs.forEach(tab => {
            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            const textSources = [
                tab.textContent,
                tab.innerText,
                tab.getAttribute('aria-label'),
                tab.getAttribute('title'),
                tab.getAttribute('data-name')
            ].filter(Boolean);

            const isTargetTab = textSources.some(text => 
                targetVariants.some(variant => 
                    String(text).trim().toUpperCase().includes(variant.toUpperCase())
                )
            );

            // 5. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏
            if (isTargetTab) {
                console.log("üéØ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–ª–µ–º–µ–Ω—Ç:", tab);
                
                // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                const activationMethods = [
                    () => tab.click(), // 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–∫
                    () => { // 2. –§–æ–∫—É—Å + Enter
                        tab.focus();
                        tab.dispatchEvent(new KeyboardEvent('keydown', {
                            key: 'Enter',
                            code: 'Enter',
                            keyCode: 13,
                            bubbles: true
                        }));
                    },
                    () => { // 3. –°–æ–±—ã—Ç–∏–µ –º—ã—à–∏
                        tab.dispatchEvent(new MouseEvent('click', {
                            bubbles: true,
                            view: window
                        }));
                    }
                ];

                // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
                activationMethods.forEach((method, i) => {
                    setTimeout(() => {
                        try {
                            method();
                            console.log(`‚ö° –ú–µ—Ç–æ–¥ ${i+1} –ø—Ä–∏–º–µ–Ω—ë–Ω`);
                        } catch (e) {
                            console.warn(`‚ö†Ô∏è –ú–µ—Ç–æ–¥ ${i+1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, e.message);
                        }
                    }, i * 1000); // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                });

                return;
            }
        });

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        setTimeout(findAndActivate, DELAY);
    }

    // –ó–∞–ø—É—Å–∫
    findAndActivate();

    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    new MutationObserver(findAndActivate)
        .observe(document.body, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['class', 'style', 'aria-selected']
        });
})();