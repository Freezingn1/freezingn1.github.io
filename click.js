(function() {
    const TARGET_TAB_NAME = "CUB";
    const DELAY_BETWEEN_ATTEMPTS = 2000; // 2 —Å–µ–∫
    const MAX_ATTEMPTS = 10;
    let found = false;

    console.log(`üîç –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É "${TARGET_TAB_NAME}"...`);

    function tryActivateTab(attempt = 1) {
        if (found || attempt > MAX_ATTEMPTS) return;

        // 1. –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
        const potentialTabs = document.querySelectorAll(`
            [class*="tab"], 
            [role="tab"], 
            [class*="source"],
            [class*="selector"],
            [data-testid*="tab"]
        `);

        // 2. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (const tab of potentialTabs) {
            const tabText = (
                tab.textContent?.trim() || 
                tab.getAttribute('aria-label') || 
                tab.getAttribute('title') || 
                ''
            ).toUpperCase();

            if (tabText.includes(TARGET_TAB_NAME)) {
                // 3. –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                const activate = () => {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: "${tabText.trim()}"`);
                    
                    // –°–ø–æ—Å–æ–± 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–∫
                    if (typeof tab.click === 'function') {
                        tab.click();
                        console.log("‚Üí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω .click()");
                        return true;
                    }

                    // –°–ø–æ—Å–æ–± 2: –§–æ–∫—É—Å + —ç–º—É–ª—è—Ü–∏—è Enter (–¥–ª—è TV)
                    tab.focus?.();
                    const keyboardEvent = new KeyboardEvent('keydown', {
                        key: 'Enter',
                        code: 'Enter',
                        keyCode: 13,
                        bubbles: true
                    });
                    tab.dispatchEvent(keyboardEvent);
                    console.log("‚Üí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Enter —á–µ—Ä–µ–∑ —Ñ–æ–∫—É—Å");

                    // –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    const mouseEvent = new MouseEvent('click', {
                        bubbles: true,
                        view: window
                    });
                    tab.dispatchEvent(mouseEvent);
                    return true;
                };

                if (activate()) {
                    found = true;
                    return;
                }
            }
        }

        // 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_ATTEMPTS}`);
        setTimeout(() => tryActivateTab(attempt + 1), DELAY_BETWEEN_ATTEMPTS);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —Å—Ä–∞–∑—É, –∑–∞—Ç–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö DOM
    tryActivateTab();
    
    const observer = new MutationObserver(tryActivateTab);
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true
    });
})();