(function() {
    const TARGET_TAB_NAME = "CUB";
    const CLICK_DELAY = 1500;
    const INITIAL_DELAY = 3000;
    const MAX_ATTEMPTS = 15; // –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è TV
    let attempts = 0;

    console.log(`üì∫ [TV-Web Autoclicker] –ò—â—É –≤–∫–ª–∞–¥–∫—É "${TARGET_TAB_NAME}"...`);

    function activateTab() {
        attempts++;
        if (attempts > MAX_ATTEMPTS) {
            console.log("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOM.");
            return;
        }

        // –ò—â–µ–º —Ç–∞–±—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ (–ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
        const tabs = document.querySelectorAll(`
            .search-source.selector:not(.active),
            [class*="tab"]:not([class*="active"]),
            [role="tab"]:not([aria-selected="true"]),
            [data-testid*="tab"]:not([aria-selected="true"])
        `);

        for (const tab of tabs) {
            const tabName = tab.textContent?.trim() || tab.getAttribute('aria-label') || '';
            if (tabName.toUpperCase().includes(TARGET_TAB_NAME)) {
                setTimeout(() => {
                    console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞: "${tabName}"`);

                    // –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫ (–¥–ª—è Web)
                    if (typeof tab.click === 'function') {
                        tab.click();
                        console.log("üñ±Ô∏è –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω (Web-–≤–µ—Ä—Å–∏—è)");
                        return;
                    }

                    // –°–ø–æ—Å–æ–± 2: –§–æ–∫—É—Å + Enter (–¥–ª—è TV)
                    if (typeof tab.focus === 'function') {
                        tab.focus();
                        console.log("üîç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ–∫—É—Å (TV)");

                        // –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ Enter
                        const enterEvent = new KeyboardEvent('keydown', {
                            key: 'Enter',
                            code: 'Enter',
                            keyCode: 13,
                            bubbles: true,
                        });
                        tab.dispatchEvent(enterEvent);
                        console.log("‚å®Ô∏è –°–∏–º—É–ª—è—Ü–∏—è Enter (TV)");
                        return;
                    }

                    // –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ)
                    const event = new MouseEvent('click', { bubbles: true });
                    tab.dispatchEvent(event);
                    console.log("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–ª–∏–∫");
                }, CLICK_DELAY);
                return;
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫
        setTimeout(activateTab, 1000);
    }

    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM (–≤–¥—Ä—É–≥ —Ç–∞–±—ã –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    const observer = new MutationObserver(activateTab);
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class', 'style', 'aria-selected'],
    });

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    setTimeout(activateTab, INITIAL_DELAY);
})();