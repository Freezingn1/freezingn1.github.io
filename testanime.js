(function() {
    'use strict';

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    const plugin = {
        name: 'anime_collections',
        title: '–ê–Ω–∏–º–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
        icon: 'üéå',
        api_key: 'f83446fde4dacae2924b41ff789d2bb0', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        list_id: 146567 // ID —Å–ø–∏—Å–∫–∞ TMDB
    };

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Lampa
    function waitForLampa(callback) {
        if (window.Lampa && Lampa.Storage && Lampa.Activity) {
            callback();
        } else {
            setTimeout(() => waitForLampa(callback), 100);
        }
    }

    // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    function registerSource() {
        Lampa.Storage.add('anime_source', {
            load: function(params) {
                return new Promise((resolve) => {
                    const url = `https://api.themoviedb.org/3/list/${plugin.list_id}?api_key=${plugin.api_key}`;
                    
                    console.log('Fetching:', url); // –õ–æ–≥–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
                    
                    Lampa.Reguest.json(url, (json) => {
                        console.log('Response:', json); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        
                        if (!json || !json.results) {
                            console.error('Invalid response format');
                            return resolve({results: [], more: false});
                        }

                        const items = json.results.map(item => ({
                            id: item.id,
                            type: item.media_type || 'movie',
                            name: item.title || item.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                            poster: item.poster_path 
                                ? `https://image.tmdb.org/t/p/w300${item.poster_path}`
                                : '',
                            description: item.overview || '',
                            year: (item.release_date || item.first_air_date || '').substring(0,4) || '2023',
                            rating: item.vote_average?.toFixed(1) || '0.0'
                        }));

                        resolve({results: items, more: false});
                    });
                });
            }
        });
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é
    function addMenuButton() {
        const menu = $('.menu .menu__list').first();
        if (!menu.length) {
            setTimeout(addMenuButton, 500);
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–Ω–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        menu.find(`[data-action="${plugin.name}"]`).remove();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç
        const menuItem = $(`
            <li class="menu__item selector" data-action="${plugin.name}">
                <div class="menu__ico">${plugin.icon}</div>
                <div class="menu__text">${plugin.title}</div>
            </li>
        `);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        menuItem.on('hover:enter', function() {
            console.log('Opening anime collection...');
            
            Lampa.Activity.push({
                component: 'full',
                title: plugin.title,
                source: 'anime_source',
                method: 'list',
                params: {},
                card_type: 'default'
            });
        });

        menu.prepend(menuItem);
        console.log('Menu item added successfully');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    waitForLampa(() => {
        registerSource();
        addMenuButton();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
        Lampa.Listener.follow('app_menu', addMenuButton);
    });

})();